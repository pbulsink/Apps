new.distance <- ifelse(grand.data$distance > 77 & {{grand.data$ev.team == grand.data$hometeam & grand.data$homezone == "Off"} | {grand.data$ev.team == grand.data$awayteam & grand.data$homezone == "Def"}}, sqrt((89 - abs(grand.data$xcoord))^2 + (grand.data$ycoord)^2), grand.data$adjusted.distance)
# Get shooter handedness
player.hand <- roster.master$Shoots[match(grand.data$ev.player.1, roster.master$woi.id)]
# Identify off-wing shots
off.wing <- ifelse(grand.data$etype %in% c("SHOT", "GOAL", "MISS", "BLOCK") & {{grand.data$newyc < 0 & player.hand == "L"} | {grand.data$newyc > 0 & player.hand == "R"}}, TRUE,
ifelse(grand.data$etype %in% c("SHOT", "GOAL", "MISS", "BLOCK") & {{grand.data$newyc < 0 & player.hand == "R"} | {grand.data$newyc > 0 & player.hand == "L"}}, FALSE,
NA))
# Define team strengths from the perspective of the home team
strength.cat <- paste(ifelse(grand.data$home.G > 1, grand.data$home.skaters - 1, grand.data$home.skaters),
ifelse(grand.data$away.G > 1, grand.data$away.skaters - 1, grand.data$away.skaters),
sep = "v")
# Calculate shot danger (WAR On Ice definition)
danger.zone <- c(0, 1,1,1, 1,2,2,2,1, 1,2,3,3,2,1, 1,1)
hpe <- c("blockreb2", "missreb2", "shotreb2",
"blockreb3", "missreb3", "shotreb3",
"rushn4","rusho4")
predanger <- danger.zone[grand.data$new.loc.section[1:nrow(grand.data)] + 1]
danger <- ifelse(grand.data$etype == "BLOCK" & grand.data$shot.feature %in% hpe == FALSE, predanger - 1,
ifelse(grand.data$etype != "BLOCK" & grand.data$shot.feature %in% hpe == TRUE, predanger + 1,
predanger))
# Append new information
newdata <- cbind(grand.data, strength.cat, new.distance, player.hand, off.wing, predanger, danger) %>% mutate(fo.ref = cumsum(etype == "FAC")) %>% group_by(fo.ref) %>%
mutate(since.fo = seconds - min(seconds), zonestart = first(homezone), angle = atan(newyc/(89 - newxc))*(180/pi)) %>% data.frame() %>% select(-c(fo.ref))
# ID playoff seasons
newdata$season = ifelse(newdata$gcode >= 30000, paste(newdata$season, "p", sep = ""), newdata$season)
################################################################################################################################################################################################################
################################# FUNCTIONS ####################################################################################################################################################################
################################################################################################################################################################################################################
# Function to assign combo codes
code <- function(a, b, c) {
sorted <- sort(c(first(a), first(b), first(c)), decreasing = FALSE)
p1 <- sorted[1]
p2 <- sorted[2]
p3 <- sorted[3]
return(paste(p1, p2, p3, sep = "-"))
}
# Function to summarize stats for two-player combos on the away team
sum2p.away <- function(x) {
summarise(x, venue = "away", p3 = 0, TOI = sum(event.length)/60,
CF = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team == awayteam), CA = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team != awayteam),
FF = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team == awayteam), FA = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team != awayteam),
SF = sum(etype %in% c("SHOT", "GOAL") & ev.team == awayteam), SA = sum(etype %in% c("SHOT", "GOAL") & ev.team != awayteam),
OZS = sum(etype == "FAC" & homezone == "Def"), NZS = sum(etype == "FAC" & homezone == "Neu"), DZS = sum(etype == "FAC" & homezone == "Off"),
GF = sum(etype == "GOAL" & ev.team == awayteam), GA = sum(etype == "GOAL" & ev.team != awayteam),
SCF = sum(danger >= 2 & ev.team == awayteam), SCA = sum(danger >= 2 & ev.team != awayteam),
HSCF = sum(danger >= 3 & ev.team == awayteam), HSCA = sum(danger >= 3 & ev.team != awayteam),
p1G = sum(etype == "GOAL" & ev.player.1 == p1), p1A = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1}), p1A2 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p2), p1A3 = NA,
p2G = sum(etype == "GOAL" & ev.player.1 == p2), p2A = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2}), p2A1 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p1), p2A3 = NA,
p3G = NA, p3A = NA, p3A1 = NA, p3A2 = NA) %>% data.frame()
}
# Function to summarize stats for two-player combos on the home team
sum2p.home <- function(x) {
summarise(x, venue = "home", p3 = 0, TOI = sum(event.length)/60,
CF = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team == hometeam), CA = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team != hometeam),
FF = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team == hometeam), FA = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team != hometeam),
SF = sum(etype %in% c("SHOT", "GOAL") & ev.team == hometeam), SA = sum(etype %in% c("SHOT", "GOAL") & ev.team != hometeam),
OZS = sum(etype == "FAC" & homezone == "Off"), NZS = sum(etype == "FAC" & homezone == "Neu"), DZS = sum(etype == "FAC" & homezone == "Def"),
GF = sum(etype == "GOAL" & ev.team == hometeam), GA = sum(etype == "GOAL" & ev.team != hometeam),
SCF = sum(danger >= 2 & ev.team == hometeam), SCA = sum(danger >= 2 & ev.team != hometeam),
HSCF = sum(danger >= 3 & ev.team == hometeam), HSCA = sum(danger >= 3 & ev.team != hometeam),
p1G = sum(etype == "GOAL" & ev.player.1 == p1), p1A = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1}), p1A2 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p2), p1A3 = NA,
p2G = sum(etype == "GOAL" & ev.player.1 == p2), p2A = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2}), p2A1 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p1), p2A3 = NA,
p3G = NA, p3A = NA, p3A1 = NA, p3A2 = NA) %>% data.frame()
}
# Function to summarize stats for three-player combos on the away team
sum3p.away <- function(x) {
summarise(x, venue = "away", TOI = sum(event.length)/60,
CF = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team == awayteam), CA = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team != awayteam),
FF = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team == awayteam), FA = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team != awayteam),
SF = sum(etype %in% c("SHOT", "GOAL") & ev.team == awayteam), SA = sum(etype %in% c("SHOT", "GOAL") & ev.team != awayteam),
OZS = sum(etype == "FAC" & homezone == "Def"), NZS = sum(etype == "FAC" & homezone == "Neu"), DZS = sum(etype == "FAC" & homezone == "Off"),
GF = sum(etype == "GOAL" & ev.team == awayteam), GA = sum(etype == "GOAL" & ev.team != awayteam),
SCF = sum(danger >= 2 & ev.team == awayteam), SCA = sum(danger >= 2 & ev.team != awayteam),
HSCF = sum(danger >= 3 & ev.team == awayteam), HSCA = sum(danger >= 3 & ev.team != awayteam),
p1G = sum(etype == "GOAL" & ev.player.1 == p1), p1A = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1}), p1A2 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p2), p1A3 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p3),
p2G = sum(etype == "GOAL" & ev.player.1 == p2), p2A = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2}), p2A1 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p1), p2A3 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p3),
p3G = sum(etype == "GOAL" & ev.player.1 == p3), p3A = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3}), p3A1 = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3} & ev.player.1 == p1), p3A2 = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3} & ev.player.1 == p2)) %>% data.frame()
}
# Function to summarize stats for three-player combos on the home team
sum3p.home <- function(x) {
summarise(x, venue = "home", TOI = sum(event.length)/60,
CF = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team == hometeam), CA = sum(etype %in% c("SHOT", "MISS", "GOAL", "BLOCK") & ev.team != hometeam),
FF = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team == hometeam), FA = sum(etype %in% c("SHOT", "MISS", "GOAL") & ev.team != hometeam),
SF = sum(etype %in% c("SHOT", "GOAL") & ev.team == hometeam), SA = sum(etype %in% c("SHOT", "GOAL") & ev.team != hometeam),
OZS = sum(etype == "FAC" & homezone == "Off"), NZS = sum(etype == "FAC" & homezone == "Neu"), DZS = sum(etype == "FAC" & homezone == "Def"),
GF = sum(etype == "GOAL" & ev.team == hometeam), GA = sum(etype == "GOAL" & ev.team != hometeam),
SCF = sum(danger >= 2 & ev.team == hometeam), SCA = sum(danger >= 2 & ev.team != hometeam),
HSCF = sum(danger >= 3 & ev.team == hometeam), HSCA = sum(danger >= 3 & ev.team != hometeam),
p1G = sum(etype == "GOAL" & ev.player.1 == p1), p1A = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1}), p1A2 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p2), p1A3 = sum(etype == "GOAL" & {ev.player.2 == p1 | ev.player.3 == p1} & ev.player.1 == p3),
p2G = sum(etype == "GOAL" & ev.player.1 == p2), p2A = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2}), p2A1 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p1), p2A3 = sum(etype == "GOAL" & {ev.player.2 == p2 | ev.player.3 == p2} & ev.player.1 == p3),
p3G = sum(etype == "GOAL" & ev.player.1 == p3), p3A = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3}), p3A1 = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3} & ev.player.1 == p1), p3A2 = sum(etype == "GOAL" & {ev.player.2 == p3 | ev.player.3 == p3} & ev.player.1 == p2)) %>% data.frame()
}
# Function to generate line stats for a selected game
do.season <- function(all.situations) {
gamedata <- newdata
# Clean NA
gamedata$homezone[which(is.na(gamedata$homezone) == T & gamedata$etype %in% c("PEND", "SOC", "GOFF") == F)] <- "Neu"
# Pre-group data
pregroup <- group_by(gamedata, gcode, strength.cat)
# Do teams
teams.bygame <- rbind_list(
filter(pregroup, etype %in% c("SHOT", "MISS", "GOAL", "BLOCK")) %>% summarise(venue = "home", team = first(hometeam), TCF = sum(ev.team == hometeam), TCA = sum(ev.team == awayteam), TFF = sum(etype != "BLOCK" & ev.team == hometeam), TFA = sum(etype != "BLOCK" & ev.team == awayteam), TGF = sum(etype == "GOAL" & ev.team == hometeam), TGA = sum(etype == "GOAL" & ev.team == awayteam), TSCF = sum(danger >= 2 & ev.team == hometeam), TSCA = sum(danger >= 2 & ev.team == awayteam), THSCF = sum(danger >= 3 & ev.team == hometeam), THSCA = sum(danger >= 3 & ev.team == awayteam)),
filter(pregroup, etype %in% c("SHOT", "MISS", "GOAL", "BLOCK")) %>% summarise(venue = "away", team = first(awayteam), TCF = sum(ev.team == awayteam), TCA = sum(ev.team == hometeam), TFF = sum(etype != "BLOCK" & ev.team == awayteam), TFA = sum(etype != "BLOCK" & ev.team == hometeam), TGF = sum(etype == "GOAL" & ev.team == awayteam), TGA = sum(etype == "GOAL" & ev.team == hometeam), TSCF = sum(danger >= 2 & ev.team == awayteam), TSCA = sum(danger >= 2 & ev.team == hometeam), THSCF = sum(danger >= 3 & ev.team == awayteam), THSCA = sum(danger >= 3 & ev.team == hometeam))
) %>% data.frame()
## Group by player combinations
# Two-player combos
grouped2 <- rbind_list(
group_by(gamedata, gcode, strength.cat, a1, a2) %>% rename(p1 = a1, p2 = a2) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a1, a3) %>% rename(p1 = a1, p2 = a3) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a1, a4) %>% rename(p1 = a1, p2 = a4) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a1, a5) %>% rename(p1 = a1, p2 = a5) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a2, a3) %>% rename(p1 = a2, p2 = a3) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a2, a4) %>% rename(p1 = a2, p2 = a4) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a2, a5) %>% rename(p1 = a2, p2 = a5) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a3, a4) %>% rename(p1 = a3, p2 = a4) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a3, a5) %>% rename(p1 = a3, p2 = a5) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, a4, a5) %>% rename(p1 = a4, p2 = a5) %>%
sum2p.away(),
group_by(gamedata, gcode, strength.cat, h1, h2) %>% rename(p1 = h1, p2 = h2) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h1, h3) %>% rename(p1 = h1, p2 = h3) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h1, h4) %>% rename(p1 = h1, p2 = h4) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h1, h5) %>% rename(p1 = h1, p2 = h5) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h2, h3) %>% rename(p1 = h2, p2 = h3) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h2, h4) %>% rename(p1 = h2, p2 = h4) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h2, h5) %>% rename(p1 = h2, p2 = h5) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h3, h4) %>% rename(p1 = h3, p2 = h4) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h3, h5) %>% rename(p1 = h3, p2 = h5) %>%
sum2p.home(),
group_by(gamedata, gcode, strength.cat, h4, h5) %>% rename(p1 = h4, p2 = h5) %>%
sum2p.home()
) %>% group_by(gcode, strength.cat, p1, p2, p3) %>% mutate(combocode = code(p1, p2, p3)) %>% filter(p1 != 1 & p2 != 1) %>% data.frame()
################################################################################################################################################################################################################
# Three-player combos
grouped3 <- rbind_list(
group_by(gamedata, gcode, strength.cat, a1, a2, a3) %>% rename(p1 = a1, p2 = a2, p3 = a3) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a1, a3, a4) %>% rename(p1 = a1, p2 = a3, p3 = a4) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a1, a4, a5) %>% rename(p1 = a1, p2 = a4, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a2, a3, a4) %>% rename(p1 = a2, p2 = a3, p3 = a4) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a2, a4, a5) %>% rename(p1 = a2, p2 = a4, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a1, a2, a4) %>% rename(p1 = a1, p2 = a2, p3 = a4) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a1, a2, a5) %>% rename(p1 = a1, p2 = a2, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a1, a3, a5) %>% rename(p1 = a1, p2 = a3, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a2, a3, a5) %>% rename(p1 = a2, p2 = a3, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, a3, a4, a5) %>% rename(p1 = a3, p2 = a4, p3 = a5) %>%
sum3p.away(),
group_by(gamedata, gcode, strength.cat, h1, h2, h3) %>% rename(p1 = h1, p2 = h2, p3 = h3) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h1, h3, h4) %>% rename(p1 = h1, p2 = h3, p3 = h4) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h1, h4, h5) %>% rename(p1 = h1, p2 = h4, p3 = h5) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h2, h3, h4) %>% rename(p1 = h2, p2 = h3, p3 = h4) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h2, h4, h5) %>% rename(p1 = h2, p2 = h4, p3 = h5) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h1, h2, h4) %>% rename(p1 = h1, p2 = h2, p3 = h4) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h1, h2, h5) %>% rename(p1 = h1, p2 = h2, p3 = h5) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h1, h3, h5) %>% rename(p1 = h1, p2 = h3, p3 = h5) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h2, h3, h5) %>% rename(p1 = h2, p2 = h3, p3 = h5) %>%
sum3p.home(),
group_by(gamedata, gcode, strength.cat, h3, h4, h5) %>% rename(p1 = h3, p2 = h4, p3 = h5) %>%
sum3p.home()
) %>% group_by(gcode, strength.cat, p1, p2, p3) %>% mutate(combocode = code(p1, p2, p3)) %>% filter(p1 != 1 & p2 != 1 & p3 != 1) %>% data.frame()
# Combine
grouped <- rbind_list(grouped2, grouped3)
# Summarise by game
combos <- merge(
group_by(grouped, gcode, combocode, venue, strength.cat) %>%
summarise(p1 = first(p1), p2 = first(p2), p3 = first(p3),
POS.1 = first(roster.master$pos[match(p1, roster.master$player.id)]), POS.2 = first(roster.master$pos[match(p2, roster.master$player.id)]), POS.3 = first(roster.master$pos[match(p3, roster.master$player.id)]),
NAME.1 = toupper(first(roster.master$firstlast[match(p1, roster.master$player.id)])), NAME.2 = toupper(first(roster.master$firstlast[match(p2, roster.master$player.id)])), NAME.3 = toupper(first(roster.master$firstlast[match(p3, roster.master$player.id)])),
TOI = sum(TOI), p1G = sum(p1G), p1A = sum(p1A), p1A2 = sum(p1A2), p1A3 = sum(p1A3), p2G = sum(p2G), p2A = sum(p2A), p2A1 = sum(p2A1), p2A3 = sum(p2A3),
p3G = sum(p3G), p3A = sum(p3A), p3A1 = sum(p3A1), p3A2 = sum(p3A2),
CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA), SF = sum(SF), SA = sum(SA), GF = sum(GF), GA = sum(GA),
SCF = sum(SCF), SCA = sum(SCA), HSCF = sum(HSCF), HSCA = sum(HSCA),
OZS = sum(OZS), NZS = sum(NZS), DZS = sum(DZS)) %>% data.frame(),
teams.bygame %>% data.frame(),
by.x = c("gcode", "venue", "strength.cat"), by.y = c("gcode", "venue", "strength.cat")
)
if (all.situations == "FALSE") {
flines <- filter(combos, strength.cat == "5v5" & POS.3 %in% c("C", "CD", "CL", "CR", "F", "L", "LC", "LD", "LR", "R", "RC", "RD", "RL"))
dpairs <- filter(combos, strength.cat == "5v5" & POS.1 == "D" & POS.2 == "D")
} else {
flines <- filter(combos, POS.3 %in% c("C", "CD", "CL", "CR", "F", "L", "LC", "LD", "LR", "R", "RC", "RD", "RL")) %>% group_by(combocode) %>%
summarise(team = first(team), NAME.1 = first(NAME.1), NAME.2 = first(NAME.2), NAME.3 = first(NAME.3),
TOI = sum(TOI), CF = sum(CF), CA = sum(CA), GF = sum(GF), GA = sum(GA),
SCF = sum(SCF), SCA = sum(SCA),
TCF = sum(TCF), TCA = sum(TCA), TFF = sum(TFF), TFA = sum(TFA), TGF = sum(TGF), TGA = sum(TGA),
TSCF = sum(TSCF), TSCA = sum(TSCA), THSCF = sum(THSCF), THSCA = sum(THSCA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS)) %>%
data.frame()
dpairs <- filter(combos, POS.1 == "D" & POS.2 == "D") %>% group_by(combocode) %>%
summarise(team = first(team), NAME.1 = first(NAME.1), NAME.2 = first(NAME.2), NAME.3 = first(NAME.3),
TOI = sum(TOI), CF = sum(CF), CA = sum(CA), GF = sum(GF), GA = sum(GA),
SCF = sum(SCF), SCA = sum(SCA),
TCF = sum(TCF), TCA = sum(TCA), TFF = sum(TFF), TFA = sum(TFA), TGF = sum(TGF), TGA = sum(TGA),
TSCF = sum(TSCF), TSCA = sum(TSCA), THSCF = sum(THSCF), THSCA = sum(THSCA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS)) %>%
data.frame()
}
table1 <- rbind_list(
# Totals
flines %>% group_by(combocode) %>%
summarise(team = first(team), NAME.1 = first(NAME.1), NAME.2 = first(NAME.2), NAME.3 = first(NAME.3),
TOI = sum(TOI), CF = sum(CF), CA = sum(CA), GF = sum(GF), GA = sum(GA),
SCF = sum(SCF), SCA = sum(SCA),
TCF = sum(TCF), TCA = sum(TCA), TFF = sum(TFF), TFA = sum(TFA), TGF = sum(TGF), TGA = sum(TGA),
TSCF = sum(TSCF), TSCA = sum(TSCA), THSCF = sum(THSCF), THSCA = sum(THSCA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS)) %>%
arrange(desc(TOI)) %>% select(c(team, NAME.1, NAME.2, NAME.3, TOI, CF, CA, SCF, SCA, GF, GA, TCF, TCA, TSCF, TSCA, TGF, TGA, OZS, DZS, NZS)),
dpairs %>% group_by(combocode) %>%
summarise(team = first(team), NAME.1 = first(NAME.1), NAME.2 = first(NAME.2), NAME.3 = NA,
TOI = sum(TOI), CF = sum(CF), CA = sum(CA), GF = sum(GF), GA = sum(GA),
SCF = sum(SCF), SCA = sum(SCA),
TCF = sum(TCF), TCA = sum(TCA), TFF = sum(TFF), TFA = sum(TFA), TGF = sum(TGF), TGA = sum(TGA),
TSCF = sum(TSCF), TSCA = sum(TSCA), THSCF = sum(THSCF), THSCA = sum(THSCA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS)) %>%
arrange(desc(TOI)) %>% select(c(team, NAME.1, NAME.2, NAME.3, TOI, CF, CA, SCF, SCA, GF, GA, TCF, TCA, TSCF, TSCA, TGF, TGA, OZS, DZS, NZS))
) %>% data.frame()
table <- table1 %>% mutate(C.DIFF = (CF - CA), OZS.= round((OZS/(OZS + DZS))*100, 2), CF. = round((CF/(CF + CA))*100, 2), CF.OFF = round(((TCF - CF)/((TCF - CF) + (TCA - CA)))*100, 2), CF.Rel = round((CF. - CF.OFF), 2),
SCF. = round((SCF/(SCF + SCA))*100, 2), SCF.OFF = round(((TSCF - SCF)/((TSCF - SCF) + (TSCA - SCA)))*100, 2), SCF.Rel = round((SCF. - SCF.OFF), 2),
GF. = round((GF/(GF + GA))*100, 2), GF.OFF = round(((TGF - GF)/((TGF - GF) + (TGA - GA)))*100, 2), GF.Rel = round((GF. - GF.OFF), 2),
CF60 = round((CF/TOI)*60, 2), CA60 = round((CA/TOI)*60, 2), SCF60 = round((SCF/TOI)*60, 2), SCA60 = round((SCA/TOI)*60, 2),
GF60 = round((GF/TOI)*60, 2), GA60 = round((GA/TOI)*60, 2)) %>%
select(-c(TCF, TCA, TSCF, TSCA, TGF, TGA, CF.OFF, SCF.OFF, GF.OFF)) %>% data.frame()
colnames(table) <- c("Team", "Player.1", "Player.2", "Player.3", "TOI", "CF", "CA",
"SCF", "SCA", "GF", "GA", "OZS", "DZS", "NZS", "CPM", "OZS.",
"CF.", "CF.Rel", "SCF.", "SCF.Rel", "GF.", "GF.Rel",
"CF60", "CA60", "SCF60", "SCA60", "GF60", "GA60")
return(table)
}
################################################################################################################################################################################################################
################################################################################################################################################################################################################
################################################################################################################################################################################################################
all.situations <- "FALSE"
table <- do.season(all.situations)
View(table)
end = Sys.time()
print(end - start)
################################################################################################################################################################################################################
################################################################################################################################################################################################################
################################################################################################################################################################################################################
# Write to Dropbox
write.csv(table, file = "~/Dropbox/combos.csv")
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicagoalie')
shiny::runApp('Documents/corsicagoalie')
shiny::runApp('Documents/corsicateam')
shiny::runApp('Documents/corsicaplayer')
# Load libraries
library(RSQLite)
library(dplyr)
## Load DB Tables
# Link to database
link <- "~/Documents/dryscrape data/dryscrape.sqlite"
newcon <- dbConnect(SQLite(), link)
start <- Sys.time()
# Read tables
roster <- dbReadTable(newcon, "roster")
team <- dbReadTable(newcon, "team")
goalie <- dbReadTable(newcon, "goalie")
player <- dbReadTable(newcon, "player")
combo <- dbReadTable(newcon, "combo")
## Aggregate Stats
# Roster
sumroster <- group_by(roster, Full.Name, Season, Season.Type) %>%
summarise(Team = paste(unique(Team), collapse = "/"), Number = paste(unique(Number), collapse = "/"), Team.Num = paste(unique(Team.Num), collapse = "/"),
Position = paste(unique(Position), collapse = "/"), Last.Name = first(Last.Name), First.Name = first(First.Name)) %>%
data.frame()
# Team
teamgp <- group_by(team, Team, Season, Season.Type) %>% summarise(GP = length(unique(Newcode))) %>% data.frame() %>%
mutate(Code = paste(Team, Season, Season.Type, sep = ".")) %>% data.frame()
sumteam <- group_by(team, Team, Season, Venue, Strength.State, Score.Cat, Season.Type) %>%
summarise(GP = teamgp$GP[match(paste(first(Team), first(Season), first(Season.Type), sep = "."), teamgp$Code)],
TOI = sum(TOI), CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA), SF = sum(SF), SA = sum(SA), GF = sum(GF), GA = sum(GA),
xGF = sum(xGF), xGA = sum(xGA), ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA),
AGF = sum(AGF), AGA = sum(AGA), AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA), OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OZF = sum(OZF),
DZF = sum(DZF), NZF = sum(NZF), FOW = sum(FOW), FOL = sum(FOL), HF = sum(HF), HA = sum(HA), GVA = sum(GVA), TKA = sum(TKA),
PENT = sum(PENT), PEND = sum(PEND), DISTF = sum(DISTF), DISTA = sum(DISTA)) %>% data.frame()
# Goalie
goaliegp <- group_by(goalie, Player, Season, Season.Type) %>% summarise(GP = length(unique(Newcode))) %>% data.frame() %>%
mutate(Code = paste(Player, Season, Season.Type, sep = ".")) %>% data.frame()
sumgoalie <- group_by(goalie, Player, Season, Venue, Strength.State, Score.Cat, Season.Type) %>%
summarise(GP = goaliegp$GP[match(paste(first(Player), first(Season), first(Season.Type), sep = "."), goaliegp$Code)],
Team = paste(unique(Team), collapse = "/"), TOI = sum(TOI), CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA), SF = sum(SF), SA = sum(SA),
GF = sum(GF), GA = sum(GA), xGF = sum(xGF), xGA = sum(xGA), ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA),
AGF = sum(AGF), AGA = sum(AGA), AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA), OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OZF = sum(OZF),
DZF = sum(DZF), NZF = sum(NZF), FOW = sum(FOW), FOL = sum(FOL), HF = sum(HF), HA = sum(HA), GVA = sum(GVA), TKA = sum(TKA),
PENT = sum(PENT), PEND = sum(PEND), DISTA = sum(DISTA), G = sum(G), A1 = sum(na.omit(A1)), A2 = sum(na.omit(A2)), SOA = sum(SOA), SOG = sum(SOG),
iPENT = sum(iPENT), iPEND = sum(na.omit(iPEND))) %>% data.frame()
# Player
playergp <- group_by(player, Player, Season, Season.Type) %>% summarise(GP = length(unique(Newcode))) %>% data.frame() %>%
mutate(Code = paste(Player, Season, Season.Type, sep = ".")) %>% data.frame()
sumplayer <- group_by(player, Player, Season, Venue, Strength.State, Score.Cat, Season.Type) %>%
summarise(GP = playergp$GP[match(paste(first(Player), first(Season), first(Season.Type), sep = "."), playergp$Code)],
Position = sumroster$Position[match(first(Player), sumroster$Full.Name)],
Team = paste(unique(Team), collapse = "/"), TOI = sum(TOI), CF = sum(CF), CA = sum(CA), iCF = sum(iCF), FF = sum(FF), FA = sum(FA), iFF = sum(iFF),
SF = sum(SF), SA = sum(SA), iSF = sum(iSF), GF = sum(GF), GA = sum(GA), xGF = sum(xGF), xGA = sum(xGA), ixG = sum(ixG),
ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA), AGF = sum(AGF), AGA = sum(AGA),
AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OTF = sum(OTF), OZF = sum(OZF), DZF = sum(DZF), NZF = sum(NZF),
FOW = sum(FOW), FOL = sum(FOL), iFOW = sum(iFOW), iFOL = sum(iFOL), HF = sum(HF), HA = sum(HA), iHF = sum(iHF), iHA = sum(iHA),
GVA = sum(GVA), TKA = sum(TKA), iGVA = sum(iGVA), iTKA = sum(iTKA), iBLK = sum(iBLK), PENT = sum(PENT), PEND = sum(PEND),
iDIST = sum(iDIST), G = sum(G), A1 = sum(na.omit(A1)), A2 = sum(na.omit(A2)), SOA = sum(SOA), SOG = sum(SOG), iPENT = sum(iPENT), iPEND = sum(na.omit(iPEND)),
tTOI = sum(tTOI), tCF = sum(tCF), tCA = sum(tCA), tFF = sum(tFF), tFA = sum(tFA), tSF = sum(tSF), tSA = sum(tSA),
tGF = sum(tGF), tGA = sum(tGA), txGF = sum(txGF), txGA = sum(txGA), tACF = sum(tACF), tACA = sum(tACA), tAFF = sum(tAFF), tAFA = sum(tAFA),
tASF = sum(tASF), tASA = sum(tASA), tAGF = sum(tAGF), tAGA = sum(tAGA), tAxGF = sum(tAxGF), tAxGA = sum(tAxGA), tMCF = sum(tMCF), tMCA = sum(tMCA),
tMFF = sum(tMFF), tMFA = sum(tMFA), tMSF = sum(tMSF), tMSA = sum(tMSA), tMGF = sum(tMGF), tMGA = sum(tMGA), tMxGF = sum(tMxGF), tMxGA = sum(tMxGA),
tOZS = sum(tOZS), tDZS = sum(tDZS), tNZS = sum(tNZS)) %>% data.frame() %>%
mutate(OCF = tCF - CF, OCA = tCA - CA,
OFF = tFF - FF, OFA = tFA - FA,
OSF = tSF - SF, OSA = tSA - SA,
OGF = tGF - GF, OGA = tGA - GA,
OxGF = txGF - xGF, OxGA = txGA - xGA,
OACF = tACF - ACF, OACA = tACA - ACA,
OAFF = tAFF - AFF, OAFA = tAFA - AFA,
OASF = tASF - ASF, OASA = tASA - ASA,
OAGF = tAGF - AGF, OAGA = tAGA - AGA,
OAxGF = tAxGF - AxGF, OAxGA = tAxGA - AxGA,
OMCF = tMCF - MCF, OMCA = tMCA - MCA,
OMFF = tMFF - MFF, OMFA = tMFA - MFA,
OMSF = tMSF - MSF, OMSA = tMSA - MSA,
OMGF = tMGF - MGF, OMGA = tMGA - MGA,
OMxGF = tMxGF - MxGF, OMxGA = tMxGA - MxGA,
OOZS = tOZS - OZS, ODZS = tDZS - DZS, ONZS = tNZS - NZS) %>% data.frame() %>%
select(-c(tCF:tNZS)) %>%
data.frame()
# Combo
sumcombo <- filter(combo, is.na(P4) == TRUE & is.na(P5) == TRUE) %>% group_by(Combo.Code, Season, Strength.State, Season.Type) %>%
summarise(Team = paste(unique(Team), collapse = "/"), TOI = sum(TOI), P1 = first(P1), P1.POS = first(P1.POS), P2 = first(P2), P2.POS = first(P2.POS),
P3 = first(P3), P3.POS = first(P3.POS), P4 = first(P4), P4.POS = first(P4.POS), P5 = first(P5), P5.POS = first(P5.POS),
CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA),
SF = sum(SF), SA = sum(SA), GF = sum(GF), GA = sum(GA), xGF = sum(xGF), xGA = sum(xGA),
ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA), AGF = sum(AGF), AGA = sum(AGA),
AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OZF = sum(OZF), DZF = sum(DZF), NZF = sum(NZF),
FOW = sum(FOW), FOL = sum(FOL), HF = sum(HF), HA = sum(HA),
GVA = sum(GVA), TKA = sum(TKA), PENT = sum(PENT), PEND = sum(PEND),
P1.G = sum(P1.G), P1.A1 = sum(na.omit(P1.A1)), P1.A2 = sum(na.omit(P1.A2)),
P2.G = sum(P2.G), P2.A1 = sum(na.omit(P2.A1)), P2.A2 = sum(na.omit(P2.A2)),
P3.G = sum(P3.G), P3.A1 = sum(na.omit(P3.A1)), P3.A2 = sum(na.omit(P3.A2)),
P4.G = sum(P4.G), P4.A1 = sum(na.omit(P4.A1)), P4.A2 = sum(na.omit(P4.A2)),
P5.G = sum(P5.G), P5.A1 = sum(na.omit(P5.A1)), P5.A2 = sum(na.omit(P5.A2)),
tTOI = sum(tTOI), tCF = sum(tCF), tCA = sum(tCA), tFF = sum(tFF), tFA = sum(tFA), tSF = sum(tSF), tSA = sum(tSA),
tGF = sum(tGF), tGA = sum(tGA), txGF = sum(txGF), txGA = sum(txGA), tACF = sum(tACF), tACA = sum(tACA), tAFF = sum(tAFF), tAFA = sum(tAFA),
tASF = sum(tASF), tASA = sum(tASA), tAGF = sum(tAGF), tAGA = sum(tAGA), tAxGF = sum(tAxGF), tAxGA = sum(tAxGA), tMCF = sum(tMCF), tMCA = sum(tMCA),
tMFF = sum(tMFF), tMFA = sum(tMFA), tMSF = sum(tMSF), tMSA = sum(tMSA), tMGF = sum(tMGF), tMGA = sum(tMGA), tMxGF = sum(tMxGF), tMxGA = sum(tMxGA),
tOZS = sum(tOZS), tDZS = sum(DZS), tNZS = sum(tNZS)) %>% data.frame() %>%
mutate(OCF = tCF - CF, OCA = tCA - CA,
OFF = tFF - FF, OFA = tFA - FA,
OSF = tSF - SF, OSA = tSA - SA,
OGF = tGF - GF, OGA = tGA - GA,
OxGF = txGF - xGF, OxGA = txGA - xGA,
OACF = tACF - ACF, OACA = tACA - ACA,
OAFF = tAFF - AFF, OAFA = tAFA - AFA,
OASF = tASF - ASF, OASA = tASA - ASA,
OAGF = tAGF - AGF, OAGA = tAGA - AGA,
OAxGF = tAxGF - AxGF, OAxGA = tAxGA - AxGA,
OMCF = tMCF - MCF, OMCA = tMCA - MCA,
OMFF = tMFF - MFF, OMFA = tMFA - MFA,
OMSF = tMSF - MSF, OMSA = tMSA - MSA,
OMGF = tMGF - MGF, OMGA = tMGA - MGA,
OMxGF = tMxGF - MxGF, OMxGA = tMxGA - MxGA) %>%
select(-c(tCF:tMxGA)) %>%
data.frame()
# ADD POINT PACES? + ASSIST NETWORK
# KEEP ONLY LINES/PAIRINGS?
View(sumcombo)
View(combo)
sumcombo <- filter(combo, as.character(P4) == "X" & as.character(P5) == "X") %>% group_by(Combo.Code, Season, Strength.State, Season.Type) %>%
summarise(Team = paste(unique(Team), collapse = "/"), TOI = sum(TOI), P1 = first(P1), P1.POS = first(P1.POS), P2 = first(P2), P2.POS = first(P2.POS),
P3 = first(P3), P3.POS = first(P3.POS), P4 = first(P4), P4.POS = first(P4.POS), P5 = first(P5), P5.POS = first(P5.POS),
CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA),
SF = sum(SF), SA = sum(SA), GF = sum(GF), GA = sum(GA), xGF = sum(xGF), xGA = sum(xGA),
ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA), AGF = sum(AGF), AGA = sum(AGA),
AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OZF = sum(OZF), DZF = sum(DZF), NZF = sum(NZF),
FOW = sum(FOW), FOL = sum(FOL), HF = sum(HF), HA = sum(HA),
GVA = sum(GVA), TKA = sum(TKA), PENT = sum(PENT), PEND = sum(PEND),
P1.G = sum(P1.G), P1.A1 = sum(na.omit(P1.A1)), P1.A2 = sum(na.omit(P1.A2)),
P2.G = sum(P2.G), P2.A1 = sum(na.omit(P2.A1)), P2.A2 = sum(na.omit(P2.A2)),
P3.G = sum(P3.G), P3.A1 = sum(na.omit(P3.A1)), P3.A2 = sum(na.omit(P3.A2)),
P4.G = sum(P4.G), P4.A1 = sum(na.omit(P4.A1)), P4.A2 = sum(na.omit(P4.A2)),
P5.G = sum(P5.G), P5.A1 = sum(na.omit(P5.A1)), P5.A2 = sum(na.omit(P5.A2)),
tTOI = sum(tTOI), tCF = sum(tCF), tCA = sum(tCA), tFF = sum(tFF), tFA = sum(tFA), tSF = sum(tSF), tSA = sum(tSA),
tGF = sum(tGF), tGA = sum(tGA), txGF = sum(txGF), txGA = sum(txGA), tACF = sum(tACF), tACA = sum(tACA), tAFF = sum(tAFF), tAFA = sum(tAFA),
tASF = sum(tASF), tASA = sum(tASA), tAGF = sum(tAGF), tAGA = sum(tAGA), tAxGF = sum(tAxGF), tAxGA = sum(tAxGA), tMCF = sum(tMCF), tMCA = sum(tMCA),
tMFF = sum(tMFF), tMFA = sum(tMFA), tMSF = sum(tMSF), tMSA = sum(tMSA), tMGF = sum(tMGF), tMGA = sum(tMGA), tMxGF = sum(tMxGF), tMxGA = sum(tMxGA),
tOZS = sum(tOZS), tDZS = sum(DZS), tNZS = sum(tNZS)) %>% data.frame() %>%
mutate(OCF = tCF - CF, OCA = tCA - CA,
OFF = tFF - FF, OFA = tFA - FA,
OSF = tSF - SF, OSA = tSA - SA,
OGF = tGF - GF, OGA = tGA - GA,
OxGF = txGF - xGF, OxGA = txGA - xGA,
OACF = tACF - ACF, OACA = tACA - ACA,
OAFF = tAFF - AFF, OAFA = tAFA - AFA,
OASF = tASF - ASF, OASA = tASA - ASA,
OAGF = tAGF - AGF, OAGA = tAGA - AGA,
OAxGF = tAxGF - AxGF, OAxGA = tAxGA - AxGA,
OMCF = tMCF - MCF, OMCA = tMCA - MCA,
OMFF = tMFF - MFF, OMFA = tMFA - MFA,
OMSF = tMSF - MSF, OMSA = tMSA - MSA,
OMGF = tMGF - MGF, OMGA = tMGA - MGA,
OMxGF = tMxGF - MxGF, OMxGA = tMxGA - MxGA) %>%
select(-c(tCF:tMxGA)) %>%
data.frame()
# ADD POINT PACES? + ASSIST NETWORK
# KEEP O
View(sumcombo)
sumcombo <- filter(combo, as.character(P4) == "X" & as.character(P5) == "X") %>% group_by(Combo.Code, Season, Strength.State, Season.Type) %>%
summarise(Team = paste(unique(Team), collapse = "/"), TOI = sum(TOI), P1 = first(P1), P1.POS = first(P1.POS),
P2 = first(P2), P2.POS = first(P2.POS), P3 = first(P3), P3.POS = first(P3.POS),
CF = sum(CF), CA = sum(CA), FF = sum(FF), FA = sum(FA),
SF = sum(SF), SA = sum(SA), GF = sum(GF), GA = sum(GA), xGF = sum(xGF), xGA = sum(xGA),
ACF = sum(ACF), ACA = sum(ACA), AFF = sum(AFF), AFA = sum(AFA), ASF = sum(ASF), ASA = sum(ASA), AGF = sum(AGF), AGA = sum(AGA),
AxGF = sum(AxGF), AxGA = sum(AxGA), MCF = sum(MCF), MCA = sum(MCA), MFF = sum(MFF), MFA = sum(MFA),
MSF = sum(MSF), MSA = sum(MSA), MGF = sum(MGF), MGA = sum(MGA), MxGF = sum(MxGF), MxGA = sum(MxGA),
OZS = sum(OZS), DZS = sum(DZS), NZS = sum(NZS), OZF = sum(OZF), DZF = sum(DZF), NZF = sum(NZF),
FOW = sum(FOW), FOL = sum(FOL), HF = sum(HF), HA = sum(HA),
GVA = sum(GVA), TKA = sum(TKA), PENT = sum(PENT), PEND = sum(PEND),
P1.G = sum(P1.G), P1.A1 = sum(na.omit(P1.A1)), P1.A2 = sum(na.omit(P1.A2)),
P2.G = sum(P2.G), P2.A1 = sum(na.omit(P2.A1)), P2.A2 = sum(na.omit(P2.A2)),
P3.G = sum(P3.G), P3.A1 = sum(na.omit(P3.A1)), P3.A2 = sum(na.omit(P3.A2)),
tTOI = sum(tTOI), tCF = sum(tCF), tCA = sum(tCA), tFF = sum(tFF), tFA = sum(tFA), tSF = sum(tSF), tSA = sum(tSA),
tGF = sum(tGF), tGA = sum(tGA), txGF = sum(txGF), txGA = sum(txGA), tACF = sum(tACF), tACA = sum(tACA), tAFF = sum(tAFF), tAFA = sum(tAFA),
tASF = sum(tASF), tASA = sum(tASA), tAGF = sum(tAGF), tAGA = sum(tAGA), tAxGF = sum(tAxGF), tAxGA = sum(tAxGA), tMCF = sum(tMCF), tMCA = sum(tMCA),
tMFF = sum(tMFF), tMFA = sum(tMFA), tMSF = sum(tMSF), tMSA = sum(tMSA), tMGF = sum(tMGF), tMGA = sum(tMGA), tMxGF = sum(tMxGF), tMxGA = sum(tMxGA),
tOZS = sum(tOZS), tDZS = sum(DZS), tNZS = sum(tNZS)) %>% data.frame() %>%
mutate(OCF = tCF - CF, OCA = tCA - CA,
OFF = tFF - FF, OFA = tFA - FA,
OSF = tSF - SF, OSA = tSA - SA,
OGF = tGF - GF, OGA = tGA - GA,
OxGF = txGF - xGF, OxGA = txGA - xGA,
OACF = tACF - ACF, OACA = tACA - ACA,
OAFF = tAFF - AFF, OAFA = tAFA - AFA,
OASF = tASF - ASF, OASA = tASA - ASA,
OAGF = tAGF - AGF, OAGA = tAGA - AGA,
OAxGF = tAxGF - AxGF, OAxGA = tAxGA - AxGA,
OMCF = tMCF - MCF, OMCA = tMCA - MCA,
OMFF = tMFF - MFF, OMFA = tMFA - MFA,
OMSF = tMSF - MSF, OMSA = tMSA - MSA,
OMGF = tMGF - MGF, OMGA = tMGA - MGA,
OMxGF = tMxGF - MxGF, OMxGA = tMxGA - MxGA) %>%
select(-c(tCF:tMxGA)) %>%
data.frame()
# ADD POINT PACES? + ASSIST NETWORK
# KEEP ONLY LINES/PAIRINGS?
save(sumcombo, file = "~/Dropbox/combotest.Rda")
start <- Sys.time()
require(httr)
response <- GET(url = "https://dl.dropbox.com/s/gqesi7mqq2444ih/combotest.Rda?dl=1")
writeBin(response$content, "test2.Rda")
load("test2.Rda")
data <- sumcombo
end <- Sys.time()
print(end - start)
View(data)
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
shiny::runApp('Documents/corsicaplayer')
library(shinyapps)
setwd("~/Documents/corsicateam")
deployApp()
setwd("~/Documents/corsicaplayer")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
